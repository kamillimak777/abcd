import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { ErrorHandler, Inject, Injectable } from '@angular/core';
import {
  catchError,
  delay,
  EMPTY,
  iif,
  map,
  of,
  retry,
  switchMap,
  throwError,
  timer,
} from 'rxjs';
import { albumsMock } from '../../mocks/albumsMock';
import { AlbumResponse, AlbumSearchResponse } from '../../model/Album';
import { API_URL } from '../../tokens';
import { AuthService } from '../auth.service';

@Injectable({
  providedIn: 'root',
})
export class MusicStoreService {
  constructor(
    @Inject(API_URL) private api_url: string,
    private http: HttpClient,
    private auth: AuthService,
    private errorHandler: ErrorHandler
  ) { }

  searchAlbums(query: string) {
    return this.http
      .get<unknown>(this.api_url + 'search', {
        params: { type: 'album', query },
        headers: {
          Authorization: 'Bearer ' + this.auth.getToken(),
        },
      })
      .pipe(
        map((res) => {
          isAlbumSearchResponse(res)
          return res.albums.items
        }),
        retry({
          delay(error, retryCount) {
            // Retry (with Exponential Backoff) only if no connection
            if (error.status !== 0) return throwError(() => error);
            return iif(
              () => retryCount < 3,
              timer(retryCount ** 2 * 1500),
              throwError(() => new Error('Timeout'))
            );
          },
        }),
        catchError((error, originalObs) => {
          this.errorHandler.handleError(error)

          if (!(error instanceof HttpErrorResponse))
            throw new Error('Unexpected Error')

          const errorResponse = error.error;

          if (!isSpotifyErrorResponse(errorResponse))
            throw new Error('Unexpected Error')

          return throwError(() => new Error(errorResponse.error.message))
        })
      );
  }
}


// Generated by https://quicktype.io
export interface SpotifyErrorResponse {
  error: {
    status: number;
    message: string;
  };
}

function isSpotifyErrorResponse(res: any): res is SpotifyErrorResponse {
  return res
    && 'error' in res
    && 'message' in res.error
    && typeof res.error.message === 'string'
}


function isAlbumSearchResponse(res: any): asserts res is AlbumSearchResponse {
  if (!(res 
      && 'albums' in res 
      && 'items' in res.albums 
      && Array.isArray(res.album.items))) {
    throw new Error('Invalid Search Response')
  }
}